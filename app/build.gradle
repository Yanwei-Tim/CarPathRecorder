apply plugin: 'com.android.application'

def getVersionCode = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-list', '--all', '--count'
            standardOutput = stdout
        }
        return Integer.parseInt(stdout.toString().trim())+400
    }
    catch (ignored) {
        return -1;
    }
}

def getVersionName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags', '--dirty'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }
    catch (ignored) {
        return null;
    }
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"
    defaultConfig {
        applicationId "app.gavin.carpathrecorder"
        minSdkVersion 16
        targetSdkVersion 16
        versionCode getVersionCode()
        versionName getVersionName()
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    productFlavors {
    }

    sourceSets { main { jni.srcDirs = ['src/main/jniLibs/'] } }

    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def fileName = outputFile.name;
                def fromFile = "./build/outputs/apk/" + fileName
                def intoFile = "./apks/"

                def applicationId = android.defaultConfig.applicationId
                def versionName = android.defaultConfig.versionName
                def time = new java.text.SimpleDateFormat("yyyyMMddHHmmss").format(new Date())
                def buildType = buildType.name
                def versionCode = defaultConfig.versionCode

                def appName = "${applicationId}_${versionName}_${buildType}_${versionCode}.apk"

                println("copy from " + fromFile + " to " + intoFile + appName)
                // copy --> rename
                copy {
                    from fromFile
                    into intoFile
                    rename {
                        appName
                    }
                }
            }
        }
    }

}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.1.1'
    compile 'com.android.support:design:23.1.1'
    compile files('libs/AMap_Location_v2.3.0_20160112.jar')
    compile files('libs/android-async-http-1.4.9.jar')
    compile files('libs/httpclient-4.4.1.1.jar')
    compile files('libs/AMap_3DMap_V3.2.0.1_20160122.jar')
}